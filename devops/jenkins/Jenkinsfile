pipeline {
  agent any
  environment {
    IMAGE = "devopsserdar/rpsls"
    IMAGE_WEB = "devopsserdar/rpsls-web"
    KUBECONFIG = "/var/jenkins_home/.kube/config"
  }
  options { timestamps() }
  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/demodevopss/RockPaperScissorsLizardSpock.git']]])
      }
    }
    stage('Docker Build') {
      steps {
        sh 'docker version'
            sh 'docker build -t $IMAGE:latest -t $IMAGE:$BUILD_NUMBER -f devops/docker/Dockerfile .'
    sh 'docker build -t $IMAGE_WEB:latest -t $IMAGE_WEB:$BUILD_NUMBER -f Source/Services/RPSLS.Game/Server/Dockerfile Source/Services'
      }
    }
    stage('Trivy Scan') {
      steps {
        sh 'trivy image --no-progress --ignorefile config/.trivyignore --exit-code 1 --severity CRITICAL $IMAGE:latest || trivy image --no-progress --ignorefile config/.trivyignore --exit-code 1 --severity CRITICAL $IMAGE:$BUILD_NUMBER'
      }
    }

    stage('Unit Tests') {
      steps {
        sh '''
echo "🧪 Running Unit Tests..."
mkdir -p reports/unit
if [ -f "tests/unit/RPSLS.Tests.Unit.csproj" ]; then
  dotnet test tests/unit/RPSLS.Tests.Unit.csproj --logger "trx;LogFileName=unit-tests.trx" --results-directory reports/unit/ || echo "Unit tests not ready yet"
else
  echo "Unit tests project not found, skipping..."
fi
'''
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/unit/*', allowEmptyArchive: true
        }
      }
    }

    stage('API Tests') {
      parallel {
        stage('REST API Tests') {
          steps {
            sh '''
echo "🔌 Running REST API Tests..."
mkdir -p reports/api
# Install Newman if not available
npm install -g newman >/dev/null 2>&1 || echo "Newman installation failed, trying alternative..."
# Run Postman collection tests
if [ -f "tests/api/rest/challengers.postman.json" ]; then
  newman run tests/api/rest/challengers.postman.json --environment-var "baseUrl=http://192.168.64.153:30080" --reporters html,junit --reporter-html-export reports/api/newman-report.html --reporter-junit-export reports/api/api-tests.xml || echo "API tests failed but continuing..."
else
  echo "API test collection not found"
fi
'''
          }
        }
        stage('Performance Tests') {
          steps {
            sh '''
echo "🚀 Running Performance Tests..."
mkdir -p reports/performance
# Install K6 if available
which k6 >/dev/null 2>&1 || echo "K6 not installed, skipping performance tests"
if which k6 >/dev/null 2>&1 && [ -f "tests/performance/load/api-load-test.js" ]; then
  k6 run tests/performance/load/api-load-test.js --out json=reports/performance/api-load-results.json || echo "API load test failed"
  k6 run tests/performance/load/web-load-test.js --out json=reports/performance/web-load-results.json || echo "Web load test failed"
else
  echo "Performance tests not available"
fi
'''
          }
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'reports/api/*.xml'
          archiveArtifacts artifacts: 'reports/api/*, reports/performance/*', allowEmptyArchive: true
        }
      }
    }
    stage('UI Tests (Smoke)') {
      steps {
        sh '''
set -e
WEB_URL=${WEB_URL:-http://192.168.64.153:30081}
API_URL=${API_URL:-http://192.168.64.153:30080}
mkdir -p reports/ui
docker network create rpsls-tests >/dev/null 2>&1 || true
docker rm -f selenium >/dev/null 2>&1 || true
docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g seleniarm/standalone-chromium:latest || docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g selenium/standalone-chrome:latest
 docker run --rm --network rpsls-tests --volumes-from jenkins -e SELENIUM_URL=http://selenium:4444/wd/hub -e WEB_URL=$WEB_URL -e API_URL=$API_URL -w "$WORKSPACE" python:3.11-slim sh -lc "pip install --no-cache-dir pytest selenium && pytest -q -m smoke --junitxml=reports/ui/smoke.xml tests/ui || pytest -q -m smoke --junitxml=reports/ui/smoke.xml"
'''
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'reports/ui/*.xml'
          archiveArtifacts artifacts: 'reports/ui/*.xml', allowEmptyArchive: true
          sh 'docker rm -f selenium >/dev/null 2>&1 || true; docker network rm rpsls-tests >/dev/null 2>&1 || true'
        }
      }
    }

    
    stage('Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
          sh 'docker push $IMAGE:latest && docker push $IMAGE:$BUILD_NUMBER'
          sh 'docker push $IMAGE_WEB:latest && docker push $IMAGE_WEB:$BUILD_NUMBER'
        }
      }
    }
    stage('Deploy') {
      steps {
        sh '''
set -e
            kubectl create namespace rpsls --dry-run=client -o yaml | kubectl apply -f - || true

            # Create RBAC for API
            cat <<YAML | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rpsls-api
  namespace: rpsls
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: rpsls
  name: service-reader
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-services
  namespace: rpsls
subjects:
- kind: ServiceAccount
  name: rpsls-api
  namespace: rpsls
roleRef:
  kind: Role
  name: service-reader
  apiGroup: rbac.authorization.k8s.io
YAML

            cat <<YAML | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpsls
  namespace: rpsls
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rpsls
  template:
    metadata:
      labels:
        app: rpsls
    spec:
      serviceAccountName: rpsls-api
      containers:
      - name: rpsls
        image: "$IMAGE:$BUILD_NUMBER"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: rpsls
  namespace: rpsls
spec:
  type: NodePort
  selector:
    app: rpsls
  ports:
  - name: http
    port: 80
    targetPort: 8080
    nodePort: 30080
  - name: grpc
    port: 8081
    targetPort: 8081
    nodePort: 30082
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpsls-web
  namespace: rpsls
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rpsls-web
  template:
    metadata:
      labels:
        app: rpsls-web
    spec:
      containers:
      - name: rpsls-web
        image: "$IMAGE_WEB:$BUILD_NUMBER"
        imagePullPolicy: Always
        env:
        - name: GameManager__Url
          value: "http://rpsls.rpsls.svc.cluster.local:8081"
        - name: GameManager__Grpc__GrpcOverHttp
          value: "true"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: rpsls-web
  namespace: rpsls
spec:
  type: NodePort
  selector:
    app: rpsls-web
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30081
YAML

kubectl -n rpsls rollout status deploy/rpsls --timeout=120s || true
kubectl -n rpsls rollout status deploy/rpsls-web --timeout=120s || true
'''
        script { env.DEPLOYED = 'true' }
      }
    }

    stage('Post-Deploy Tests') {
      parallel {
        stage('UI Tests (Regression)') {
          steps {
            sh '''
set -e
echo "🎭 Running UI Regression Tests..."
WEB_URL=${WEB_URL:-http://192.168.64.153:30081}
API_URL=${API_URL:-http://192.168.64.153:30080}
mkdir -p reports/ui
docker network create rpsls-tests >/dev/null 2>&1 || true
docker rm -f selenium >/dev/null 2>&1 || true
docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g seleniarm/standalone-chromium:latest || docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g selenium/standalone-chrome:latest
docker run --rm --network rpsls-tests --volumes-from jenkins -e SELENIUM_URL=http://selenium:4444/wd/hub -e WEB_URL=$WEB_URL -e API_URL=$API_URL -w "$WORKSPACE" python:3.11-slim sh -lc "pip install --no-cache-dir pytest selenium && pytest -q -m regression --junitxml=reports/ui/regression.xml tests/ui || pytest -q -m regression --junitxml=reports/ui/regression.xml" | cat
'''
          }
          post {
            always {
              sh 'docker rm -f selenium >/dev/null 2>&1 || true; docker network rm rpsls-tests >/dev/null 2>&1 || true'
            }
          }
        }
        stage('Cross-Browser Tests') {
          steps {
            sh '''
echo "🌐 Running Cross-Browser Tests..."
mkdir -p reports/cross-platform
docker network create rpsls-tests >/dev/null 2>&1 || true
docker rm -f selenium >/dev/null 2>&1 || true
docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g seleniarm/standalone-chromium:latest || docker run -d --name selenium --network rpsls-tests -p 4444:4444 --shm-size=2g selenium/standalone-chrome:latest
docker run --rm --network rpsls-tests --volumes-from jenkins -e SELENIUM_URL=http://selenium:4444/wd/hub -e WEB_URL=http://192.168.64.153:30081 -w "$WORKSPACE" python:3.11-slim sh -lc "pip install --no-cache-dir pytest selenium pytest-html && pytest -q tests/cross-platform/browsers/multi-browser-test.py -m cross_browser --junitxml=reports/cross-platform/cross-browser.xml --html=reports/cross-platform/browser-test-report.html --self-contained-html || echo 'Cross-browser tests failed'" | cat
'''
          }
          post {
            always {
              sh 'docker rm -f selenium >/dev/null 2>&1 || true; docker network rm rpsls-tests >/dev/null 2>&1 || true'
            }
          }
        }
        stage('Security Tests') {
          steps {
            sh '''
echo "🔒 Running Security Tests..."
mkdir -p reports/security
# OWASP ZAP Security Scan
if command -v python3 >/dev/null 2>&1 && [ -f "tests/security/owasp/zap-baseline.py" ]; then
  chmod +x tests/security/owasp/zap-baseline.py
  python3 tests/security/owasp/zap-baseline.py || echo "Security tests failed but continuing..."
else
  echo "Security tests not available"
fi
'''
          }
        }
        stage('Infrastructure Tests') {
          steps {
            sh '''
echo "🐳 Running Infrastructure Tests..."
mkdir -p reports/infrastructure
if [ -f "tests/infrastructure/docker/container-health.sh" ]; then
  chmod +x tests/infrastructure/docker/container-health.sh
  bash tests/infrastructure/docker/container-health.sh || echo "Infrastructure tests failed but continuing..."
else
  echo "Infrastructure tests not available"
fi
'''
          }
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'reports/**/*.xml'
          archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
        }
      }
    }

    stage('Generate Reports') {
      steps {
        sh '''
echo "📊 Generating Unified Test Report..."
mkdir -p reports
if [ -f "tests/scripts/generate-reports.js" ]; then
  cd tests && npm install >/dev/null 2>&1 || echo "NPM install failed"
  node scripts/generate-reports.js || echo "Report generation failed"
else
  echo "Report generator not available"
fi

echo "📋 Test Summary:"
echo "================"
find reports -name "*.xml" -type f | wc -l | xargs echo "Total test result files:"
find reports -name "*.html" -type f | wc -l | xargs echo "Total HTML reports:"
echo "All reports saved to: reports/"
'''
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
          echo '📊 All test reports archived in Jenkins artifacts'
        }
      }
    }
  }
}


